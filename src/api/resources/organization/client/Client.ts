/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Mercoa } from "@mercoa/javascript";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.MercoaEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Get current organization information
     */
    public async get(request: Mercoa.GetOrganizationRequest = {}): Promise<Mercoa.OrganizationResponse> {
        const { paymentMethods, emailProvider } = request;
        const _queryParams = new URLSearchParams();
        if (paymentMethods != null) {
            _queryParams.append("paymentMethods", paymentMethods.toString());
        }

        if (emailProvider != null) {
            _queryParams.append("emailProvider", emailProvider.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.MercoaEnvironment.Production, "/organization"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.OrganizationResponse.parseOrThrow(
                _response.body as serializers.OrganizationResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MercoaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update current organization
     */
    public async update(request: Mercoa.OrganizationRequest): Promise<Mercoa.OrganizationResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.MercoaEnvironment.Production, "/organization"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.OrganizationRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.OrganizationResponse.parseOrThrow(
                _response.body as serializers.OrganizationResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.MercoaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MercoaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.MercoaTimeoutError();
            case "unknown":
                throw new errors.MercoaError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
