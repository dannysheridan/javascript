/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Mercoa from "../../../../api";
import * as core from "../../../../core";

export const InvoiceResponse: core.serialization.ObjectSchema<
    serializers.invoice.InvoiceResponse.Raw,
    Mercoa.invoice.InvoiceResponse
> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import("../../..")).InvoiceId),
    status: core.serialization.lazy(async () => (await import("../../..")).invoice.InvoiceStatus),
    amount: core.serialization.number().optional(),
    currency: core.serialization.lazy(async () => (await import("../../..")).CurrencyCode).optional(),
    invoiceDate: core.serialization.date().optional(),
    deductionDate: core.serialization.date().optional(),
    fundedDate: core.serialization.date().optional(),
    dueDate: core.serialization.date().optional(),
    invoiceNumber: core.serialization.string().optional(),
    noteToSelf: core.serialization.string().optional(),
    serviceStartDate: core.serialization.date().optional(),
    serviceEndDate: core.serialization.date().optional(),
    payerId: core.serialization.lazy(async () => (await import("../../..")).EntityId).optional(),
    payer: core.serialization.lazyObject(async () => (await import("../../..")).entity.EntityResponse).optional(),
    paymentSource: core.serialization.lazy(async () => (await import("../../..")).PaymentMethodResponse).optional(),
    paymentSourceId: core.serialization.lazy(async () => (await import("../../..")).InvoiceId).optional(),
    vendorId: core.serialization.lazy(async () => (await import("../../..")).EntityId).optional(),
    vendor: core.serialization.lazyObject(async () => (await import("../../..")).entity.EntityResponse).optional(),
    paymentDestination: core.serialization
        .lazy(async () => (await import("../../..")).PaymentMethodResponse)
        .optional(),
    paymentDestinationId: core.serialization.lazy(async () => (await import("../../..")).InvoiceId).optional(),
    paymentDestinationConfirmed: core.serialization.boolean(),
    hasDocuments: core.serialization.boolean(),
    comments: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).invoice.CommentResponse))
        .optional(),
    transactions: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).TransactionResponse))
        .optional(),
    lineItems: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).invoice.InvoiceLineItemResponse))
        .optional(),
    approvers: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).invoice.InvoiceApproverResponse)
    ),
    approvalPolicy: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../..")).entity.ApprovalPolicyResponse)
    ),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.string()),
    createdBy: core.serialization
        .lazyObject(async () => (await import("../../..")).entity.EntityUserResponse)
        .optional(),
    processedAt: core.serialization.date().optional(),
    createdAt: core.serialization.date(),
    updatedAt: core.serialization.date(),
});

export declare namespace InvoiceResponse {
    interface Raw {
        id: serializers.InvoiceId.Raw;
        status: serializers.invoice.InvoiceStatus.Raw;
        amount?: number | null;
        currency?: serializers.CurrencyCode.Raw | null;
        invoiceDate?: string | null;
        deductionDate?: string | null;
        fundedDate?: string | null;
        dueDate?: string | null;
        invoiceNumber?: string | null;
        noteToSelf?: string | null;
        serviceStartDate?: string | null;
        serviceEndDate?: string | null;
        payerId?: serializers.EntityId.Raw | null;
        payer?: serializers.entity.EntityResponse.Raw | null;
        paymentSource?: serializers.PaymentMethodResponse.Raw | null;
        paymentSourceId?: serializers.InvoiceId.Raw | null;
        vendorId?: serializers.EntityId.Raw | null;
        vendor?: serializers.entity.EntityResponse.Raw | null;
        paymentDestination?: serializers.PaymentMethodResponse.Raw | null;
        paymentDestinationId?: serializers.InvoiceId.Raw | null;
        paymentDestinationConfirmed: boolean;
        hasDocuments: boolean;
        comments?: serializers.invoice.CommentResponse.Raw[] | null;
        transactions?: serializers.TransactionResponse.Raw[] | null;
        lineItems?: serializers.invoice.InvoiceLineItemResponse.Raw[] | null;
        approvers: serializers.invoice.InvoiceApproverResponse.Raw[];
        approvalPolicy: serializers.entity.ApprovalPolicyResponse.Raw[];
        metadata: Record<string, string>;
        createdBy?: serializers.entity.EntityUserResponse.Raw | null;
        processedAt?: string | null;
        createdAt: string;
        updatedAt: string;
    }
}
