/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Mercoa from "../../../../api";
import * as core from "../../../../core";

export const PaymentMethodResponse: core.serialization.Schema<
    serializers.PaymentMethodResponse.Raw,
    Mercoa.PaymentMethodResponse
> = core.serialization
    .union("type", {
        bankAccount: core.serialization.lazyObject(async () => (await import("../../..")).BankAccountResponse),
        card: core.serialization.lazyObject(async () => (await import("../../..")).CardResponse),
        check: core.serialization.lazyObject(async () => (await import("../../..")).CheckResponse),
        custom: core.serialization.lazyObject(async () => (await import("../../..")).CustomPaymentMethodResponse),
    })
    .transform<Mercoa.PaymentMethodResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace PaymentMethodResponse {
    type Raw =
        | PaymentMethodResponse.BankAccount
        | PaymentMethodResponse.Card
        | PaymentMethodResponse.Check
        | PaymentMethodResponse.Custom;

    interface BankAccount extends serializers.BankAccountResponse.Raw {
        type: "bankAccount";
    }

    interface Card extends serializers.CardResponse.Raw {
        type: "card";
    }

    interface Check extends serializers.CheckResponse.Raw {
        type: "check";
    }

    interface Custom extends serializers.CustomPaymentMethodResponse.Raw {
        type: "custom";
    }
}
